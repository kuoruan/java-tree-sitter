plugins {
    id "java-library"
    id "maven-publish"
}

group = "ai.serenade"
version = "1.2.0"

repositories {
    mavenLocal()
    mavenCentral()
}

def sharedObject = "libjava-tree-sitter"

tasks.register("buildSharedObject") {
    inputs.file "lib/ai_serenade_treesitter_Languages.cc"
    inputs.file "lib/ai_serenade_treesitter_Languages.h"
    inputs.file "lib/ai_serenade_treesitter_TreeSitter.cc"
    inputs.file "lib/ai_serenade_treesitter_TreeSitter.h"
    outputs.file "${sharedObject}.dylib"
    outputs.file "${sharedObject}.so"
    outputs.file "${sharedObject}.dll"

    doLast {
        exec {
            commandLine "python3", "build.py",
                    "-a", "${System.getProperty("os.arch")}",
                    "-o", "${sharedObject}",
                    "languages/tree-sitter-python",
                    "languages/tree-sitter-java",
                    "languages/tree-sitter-javascript",
                    "languages/tree-sitter-typescript/typescript",
                    "languages/tree-sitter-typescript/tsx"
        }
    }
}

clean {
    delete "${sharedObject}.dylib"
    delete "${sharedObject}.so"
    delete "${sharedObject}.dll"
}

compileJava {
    options.compilerArgs += ["-h", "${project.projectDir.toString()}/lib"]
}

compileTestJava {
    dependsOn buildSharedObject
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }

    def osName = System.getProperty("os.name").toLowerCase()
    def libraryExtension

    if (osName.contains("mac")) {
        libraryExtension = "dylib"
    } else if (osName.contains("linux")) {
        libraryExtension = "so"
    } else if (osName.contains("win")) {
        libraryExtension = "dll"
    } else {
        throw new GradleException("Unsupported OS: ${osName}")
    }

    environment "JAVA_TREE_SITTER", "${project.projectDir.toString()}/libjava-tree-sitter.${libraryExtension}"
}
